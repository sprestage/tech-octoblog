<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails Console | My Technical Blog]]></title>
  <link href="http://techblog.susanprestage.com//blog/categories/rails-console/atom.xml" rel="self"/>
  <link href="http://techblog.susanprestage.com//"/>
  <updated>2016-01-16T19:41:56-08:00</updated>
  <id>http://techblog.susanprestage.com//</id>
  <author>
    <name><![CDATA[Susan Prestage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Binding Pry and the Power of the Rails Console]]></title>
    <link href="http://techblog.susanprestage.com//blog/2014/10/21/binding-pry-and-the-power-of-the-rails-console/"/>
    <updated>2014-10-21T13:13:17-07:00</updated>
    <id>http://techblog.susanprestage.com//blog/2014/10/21/binding-pry-and-the-power-of-the-rails-console</id>
    <content type="html"><![CDATA[<p>The most powerful tool I use on a daily basis is the gem, binding.pry.</p>

<h2>Setup</h2>

<p>Put the pry-rails gem into your Gemfile for dev and test.</p>

<h6>Gemfile</h6>

<pre>
group :test, :development do
  gem 'pry-rails'
end
</pre>


<p>You will now need to run</p>

<pre>
  $ bundle install
</pre>


<p>at the command line.</p>

<h2>How to use</h2>

<p>Put the phrase &lsquo;binding.pry&rsquo; without the quotes into a piece of your code that you want to investigate and binding.pry will open up a rails console at your command line.  This even works in test files.  If you need this in the middle of a haml file, be sure to obey the tabbing convention required by haml, and also put a &lsquo;-&rsquo; dash in front of the binding.pry, like so:</p>

<h6>Ruby file syntax</h6>

<pre>
  binding.pry
</pre>


<h6>Haml file syntax</h6>

<pre>
  - binding.pry
</pre>


<p>Remember, you will need to type exit out of the rails console and to return your server to  whatever it was doing before it hit the binding.pry.</p>

<p>This is particularly useful to see the current scope of variables and also to look at what is in the database.</p>

<pre>
  > Company.find(7).users.find(24)

  > Company.find(7).team_memberships

  > Company.find(7).users.find(26)

  > Company.find(7).users

  > Company.all

  > c = Company.find(7)

  > c.users

  > User.where(id: 45)

  > User.where(email: "susan@example.com")

  > User.where(id: 73).pluck(:first_name, :last_name)
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Do Database Stuff From Within Rails]]></title>
    <link href="http://techblog.susanprestage.com//blog/2014/10/13/how-to-do-database-stuff-from-within-rails/"/>
    <updated>2014-10-13T11:52:35-07:00</updated>
    <id>http://techblog.susanprestage.com//blog/2014/10/13/how-to-do-database-stuff-from-within-rails</id>
    <content type="html"><![CDATA[<h3>Rails Console</h3>

<p>The rails console is one of the most powerful debug and development tools.  Most particularly, for database manipulation.</p>

<p>Here are some of my most frequently used commands:</p>

<p>Here are some of my much less frequently used, but very powerful and sometimes necessary.  As a rule, I try to only examine what is in my database from the console.  Creating and deleting records from the command line really isn&rsquo;t the way you want to manipulate your database.  That said, sometimes to have to:</p>

<h4>Create</h4>

<pre><code>  &gt; u = User.create password: "mypasswd", first_name: "test", last_name: "testovich"
</code></pre>

<h4>Update</h4>

<pre><code>  &gt; u = User.find(30)
  &gt; u.update_attributes(roles_mask: 3)
</code></pre>

<p>If the above doesn&rsquo;t work, this may:
```</p>

<blockquote><p>User.where(id: 27)[0].update(age: 42, next_birthday: &ldquo;2014-10-14&rdquo;)
```</p></blockquote>

<h4>Destroy</h4>

<pre><code>  &gt; User.find(30).destroy
</code></pre>

<h3>Backup &amp; Restore</h3>

<pre><code>  $ pg_dump -U featherlight featherlight_development -Fc &gt; backup.dump
</code></pre>

<p>The first command seems to be the one that works
<code>
  $ pg_restore -c -C -F c -v -U postgres backup.dump
  $ pg_restore -U featherlight -d featherlight_development backup.dump
</code></p>

<h3>Creating a database and user</h3>

<pre><code>  $ createuser portfolio
  Shall the new role be a superuser? (y/n) n
  Shall the new role be allowed to create databases? (y/n) n
  Shall the new role be allowed to create more new roles? (y/n) n
  CREATE ROLE
  $
</code></pre>

<pre><code>  $ createdb portfolio_test -O portfolio
</code></pre>

<ul>
<li>-O owner name is the option in the command line.</li>
</ul>


<h3>Queries with date ranges</h3>

<pre><code>  FeedbackRequest.where(created_at: 5.days.ago..4.days.ago)
</code></pre>
]]></content>
  </entry>
  
</feed>
