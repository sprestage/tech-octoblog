<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | My Technical Blog]]></title>
  <link href="http://sprestage-tech-blog.herokuapp.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://sprestage-tech-blog.herokuapp.com/"/>
  <updated>2014-03-19T12:51:33-07:00</updated>
  <id>http://sprestage-tech-blog.herokuapp.com/</id>
  <author>
    <name><![CDATA[Susan Prestage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My personal Git command reference]]></title>
    <link href="http://sprestage-tech-blog.herokuapp.com/blog/2013/12/02/my-personal-git-command-reference/"/>
    <updated>2013-12-02T18:47:42-08:00</updated>
    <id>http://sprestage-tech-blog.herokuapp.com/blog/2013/12/02/my-personal-git-command-reference</id>
    <content type="html"><![CDATA[<h1>Git Basics</h1>

<h2>Setting up a new project</h2>

<h3>Set up the local repository</h3>

<p>Brand new project.  Start in the project directory.  Then:</p>

<pre>
  $ git init
</pre>


<p>Ready to stage your commits?  Here is the long way:</p>

<pre>
  $ git add .
  $ git commit -m "Initial commit"
</pre>


<p>Here is a useful short way to do both of the above commands at once:</p>

<pre>
  $ git commit -am "Initial commit"
</pre>


<h3>Set up remote repository</h3>

<p>Point to a new repo on github.  Note: must create this new repo on github first!</p>

<pre>
  $ git remote add origin https://github.com/&ltusername>/&ltyour_new_app_name>.git
</pre>


<p>Show the remote repositories that are being pointed to:</p>

<pre>
  $ git remote -v
</pre>


<p>List remote and local branches:</p>

<pre>
  $ git branch -a
</pre>


<p>Push to github:</p>

<pre>
  $ git push -u origin master
</pre>


<h3>Set up Heroku</h3>

<p>First, go to Heroku and create a new repo.
Next, push to heroku:</p>

<pre>
  $ heroku create
  $ git push heroku master
  $ heroku run rake db:migrate
</pre>


<p>Further pushes to heroku</p>

<pre>
  $ git push heroku master
</pre>


<p>If you encounter problems, this will show you the logs on Heroku for diagnostics</p>

<pre>
  $ heroku logs
</pre>


<h2>Frequent staging, commiting, and pushing</h2>

<p>Even better is that if you are working offline, you can keep staging and committing.  Then push all to the remote repository at once when you have internet connectivity again.</p>

<pre>
  $ git add .
  $ git commit -m "brief explanation of changes here"
  $ git push
</pre>


<h3>What is the status of your files</h3>

<p>How is git looking (you will find some useful guidance printed out with this command too):</p>

<pre>
  $ git status
</pre>


<h1>Branching, this scares me&hellip;</h1>

<p>First, create the branch locally.  This automatically changes you to this branch locally.</p>

<pre>
  $ git checkout -b new_branch_name
</pre>


<p>To check this into github, do this and the new branch will automatically get created on github,
then your code will get pushed into that branch.</p>

<pre>
  $ git push origin new_branch_name
</pre>


<p>Also very useful are these links:
<a href="http://www.ndpsoftware.com/git-cheatsheet.html#loc=workspace;">http://www.ndpsoftware.com/git-cheatsheet.html#loc=workspace;</a>
<a href="http://git-scm.com/book">http://git-scm.com/book</a></p>

<p>Use this to confirm WHICH branch you are on.</p>

<pre>
  $ git branch
  $ git add .
  $ git commit -m "a good commit message"
  $ git push origin new_branch_name  
</pre>


<p>Very important tips for switching between branches.  ALWAYS commit your changes to your current
branch before changing branches.  I assumed the files would stay in the old branch as I switched
to the new branch, but NO.  The changes will follow you around like a lost puppy until you commit
them.</p>

<p>Ok, I&rsquo;ve got this branch (or worse, several branches).  I&rsquo;m done working on them.  They are all checked in, as branches.  But now, I need to get the master branch back up to date.  How do I do this with FIVE branches.  Don&rsquo;t panic, we can do this thing.  First, make sure everything is up to date and checked in.  For me, everything is check in locally and remotely.</p>

<pre>
  $ git status
</pre>


<p>Then, get onto the master branch.</p>

<pre>
  $ git checkout master
</pre>


<p>Now we are going to merge each branch in, push it to github, and then delete the branch since we are done with them.  Skip the last step if you aren&rsquo;t quite done with the branch.</p>

<pre>
  $ git merge chapter_2
  $ git push origin master    (also can just usually say 'git push' here)
  $ git branch -d chapter_2
  
  $ git merge chapter_3
  $ git push 
  $ git branch -d chapter_3
</pre>


<p>Repeat until you&rsquo;ve merged in each branch.  Yeay!  This worked for me and I saw what I wanted on github.  I have both the branches I expect as well as each branch merge present as a commit on the master.  Excellent!  Git is starting to be a Very useful tool instead of an occasional impediment.  :)</p>

<h1>Advanced</h1>

<p>Show the last 3 commits:</p>

<pre>
  $ git log --oneline
</pre>


<p>Want to get the new stuff from master into your branch, but before your commited changes?  Do this.  First switch to the branch &lsquo;foo&rsquo;</p>

<pre>
  $ git checkout foo
  
  $ git rebase master
</pre>


<p>In the middle of some work on another branch and have to interrupt and get back to the master for some reason?  Do this.  First see what you are working on</p>

<pre>
  $ git diff
</pre>


<p>Save working directory and index state WIP on my_branch and restores last commit.</p>

<pre>
  $ git stash save
</pre>


<p>Now these return nothing</p>

<pre>
  $ git diff
  $ git status
</pre>


<p>Now get back to master and update:</p>

<pre>
  $ git checkout master
  $ git pull
</pre>


<p>When done, get back to our stashed work:</p>

<pre>
  $ git checkout my_branch
  $ git stash apply
</pre>


<p>Verify we are in the same place:</p>

<pre>
  $ git diff
  
  $ git stash list
  $ git stash apply stash@{1}
  $ git stash drop
</pre>


<h2>Whoops!  Now what do I do?</h2>

<p>To check out a particular commit, use</p>

<pre>
  $ git checkout &ltsha1>
</pre>


<p>To revert changes made to your working copy, do this</p>

<pre>
  $ git checkout .
</pre>


<p>This will create three separate revert commits:</p>

<pre>
  $ git revert 0766c053 25eee4ca a867b4af
</pre>


<p>It also takes ranges. This will revert the last two commits:</p>

<pre>
  $ git revert HEAD~2..HEAD
</pre>


<p>To get just one, you could use <code>rebase -i</code> to squash them afterwards  Or, you could do it manually (be sure to do this at top level of the repo) get your index and work tree into the desired state, without changing HEAD:</p>

<pre>
  $ git checkout 0d1d7fc32 .
</pre>


<p>and then commit</p>

<pre>
  $ git commit    # be sure and write a good message describing what you just did  
</pre>


<p>I don&rsquo;t like my past several commits.  I want to go back to a particular commit.  Reset may be a BAD, BAD way of doing things, so look out!</p>

<pre>
  $ git reset --hard HEAD~5
</pre>


<p>Ok, now I want to go restore those several commits, can I?</p>

<h2>Fini</h2>

<p>Thank you for reading.  I hope you found this useful.  I invite you to read my next post if you are interested in the unix commands that I find most useful.</p>
]]></content>
  </entry>
  
</feed>
