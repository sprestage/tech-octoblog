<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | My Technical Blog]]></title>
  <link href="http://techblog.susanprestage.com//blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://techblog.susanprestage.com//"/>
  <updated>2016-01-16T19:05:21-08:00</updated>
  <id>http://techblog.susanprestage.com//</id>
  <author>
    <name><![CDATA[Susan Prestage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How Do I Upgrade My Ruby Again?]]></title>
    <link href="http://techblog.susanprestage.com//blog/2014/11/06/how-do-i-upgrade-my-ruby-again/"/>
    <updated>2014-11-06T08:47:02-08:00</updated>
    <id>http://techblog.susanprestage.com//blog/2014/11/06/how-do-i-upgrade-my-ruby-again</id>
    <content type="html"><![CDATA[<p>If you want to use Rbenv on OS X you&rsquo;ll need to install the Xcode command-line tools:</p>

<pre>
  $ xcode-select --install
</pre>


<p>Then install Home Brew:</p>

<pre>
  $ ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
</pre>


<p>Complete Home Brew setup:</p>

<pre>
  $ brew doctor
  $ brew update
</pre>


<p>At this point you&rsquo;ll be able to install rbenv and ruby-build:</p>

<pre>
  $ brew install rbenv ruby-build
</pre>


<p>Add the following to your .bash_profile:</p>

<pre>
  eval "$(rbenv init -)"
</pre>


<p>Reload your bash profile settings:</p>

<pre>
  $ source ~/.bash_profile
</pre>


<p>Then you can install Ruby:</p>

<pre>
  $ rbenv install 2.1.2
</pre>


<p>Thanks to John O. at TeamTreeHouse for giving this well written response to this inquiry.</p>

<p>To set as your current version of Ruby run the following command:</p>

<pre>
  $ rvm use 2.0.0
</pre>


<p>To make it the default Ruby:</p>

<pre>
  $ rvm default 2.0.0
</pre>


<p>or</p>

<pre>
  $ rvm use 2.0.0 --default
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String Manipulation in Ruby]]></title>
    <link href="http://techblog.susanprestage.com//blog/2014/03/21/string-manipulation-in-ruby/"/>
    <updated>2014-03-21T12:12:17-07:00</updated>
    <id>http://techblog.susanprestage.com//blog/2014/03/21/string-manipulation-in-ruby</id>
    <content type="html"><![CDATA[<h1>Set vs concantenate</h1>

<p>Set equal to this string.  No initialization needed.</p>

<pre>
> farewell = "Good"  
</pre>




<pre>
> puts farewell
</pre>


<p>will return</p>

<pre>
  => Good
</pre>


<p>Concantenation requires the variable to be initialized.  This only works because the variable was initialized above.</p>

<pre>
> farewell << "bye!"  
</pre>




<pre>
> puts farewell
</pre>


<p></p>

<p>will return</p>

<pre>
  => Goodbye!
</pre>


<h1>String operations</h1>

<p>Find where a substring is within the source string using index.</p>

<pre>
"hello".index('e')             #=> 1
"hello".index('lo')            #=> 3
"hello".index('a')             #=> nil
"hello".index(?e)              #=> 1
"hello".index(/[aeiou]/, -3)   #=> 4
</pre>


<p>Take input from the user:</p>

<pre>
puts "Please input some text: "
foo = gets.chomp
puts foo
</pre>


<p>If you are using ARGV to bring in command line arguments when you launch your app, you will run into conflict when using gets.  You can work around this two ways.  First is to use perform whatever tasks you need to on ARGV, then:</p>

<pre>
ARGV.clear
foo = gets.chomp
</pre>


<p>Otherwise, everytime you call gets, you will need to specify that it is from IO, not Kernal:</p>

<pre>
foo = $stdin.gets.chomp
</pre>


<p>Replace the first instance of the sub_string, &ldquo;replace_me&rdquo;, with the contents of foo.</p>

<pre>
bar = bar.sub("replace_me", foo)
</pre>


<p>Globally replace the sub_string, &ldquo;replace_me&rdquo;, with the contents of foo.</p>

<pre>
bar = bar.<b>g</b>sub("replace_me", foo)
</pre>


<p>Find the first example of substring, &ldquo;find_me&rdquo;.  This is most often used with regex in place of the &ldquo;find_me&rdquo; string.  Returns a string.</p>

<pre>
bing = bar.match("find_me")
</pre>


<p>Find the every example of substring, &ldquo;find_me&rdquo;.  This is most often used with regex in place of the &ldquo;find_me&rdquo; string.  Returns an array of strings.</p>

<pre>
bing = bar.scan("find_me")
</pre>

]]></content>
  </entry>
  
</feed>
