<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Binding Pry | My Technical Blog]]></title>
  <link href="http://techblog.susanprestage.com//blog/categories/binding-pry/atom.xml" rel="self"/>
  <link href="http://techblog.susanprestage.com//"/>
  <updated>2016-01-16T19:46:09-08:00</updated>
  <id>http://techblog.susanprestage.com//</id>
  <author>
    <name><![CDATA[Susan Prestage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Binding Pry and the Power of the Rails Console]]></title>
    <link href="http://techblog.susanprestage.com//blog/2014/10/21/binding-pry-and-the-power-of-the-rails-console/"/>
    <updated>2014-10-21T13:13:17-07:00</updated>
    <id>http://techblog.susanprestage.com//blog/2014/10/21/binding-pry-and-the-power-of-the-rails-console</id>
    <content type="html"><![CDATA[<p>The most powerful tool I use on a daily basis is the binding.pry gem.</p>

<h2>Setup</h2>

<p>Put the pry-rails gem into your Gemfile for dev and test.</p>

<h6>Gemfile</h6>

<pre><code>group :test, :development do
  gem 'pry-rails'
end
</code></pre>

<p>You will now need to run
<code>
  $ bundle install
</code>
at the command line.</p>

<h2>How to use</h2>

<p>Put the phrase &lsquo;binding.pry&rsquo; without the quotes into a piece of your code that you want to investigate and binding.pry will open up a rails console at your command line.  This even works in test files.  If you need this in the middle of a haml file, be sure to obey the tabbing convention required by haml, and also put a &lsquo;-&rsquo; dash in front of the binding.pry, like so:</p>

<h6>Ruby file syntax</h6>

<pre><code>  binding.pry
</code></pre>

<h6>Haml file syntax</h6>

<pre><code>  - binding.pry
</code></pre>

<p>Remember, you will need to type exit out of the rails console and to return your server to  whatever it was doing before it hit the binding.pry.</p>

<p>This is particularly useful to see the current scope of variables and also to look at what is in the database.
```</p>

<blockquote><p>Company.find(7).users.find(24)</p>

<p>Company.find(7).team_memberships</p>

<p>Company.find(7).users.find(26)</p>

<p>Company.find(7).users</p>

<p>Company.all</p>

<p>c = Company.find(7)</p>

<p>c.users</p>

<p>User.where(id: 45)</p>

<p>User.where(email: &ldquo;<a href="&#109;&#97;&#105;&#x6c;&#x74;&#111;&#x3a;&#115;&#117;&#x73;&#x61;&#x6e;&#64;&#101;&#x78;&#x61;&#109;&#x70;&#x6c;&#101;&#46;&#99;&#111;&#109;">&#x73;&#117;&#x73;&#x61;&#x6e;&#64;&#x65;&#x78;&#x61;&#109;&#112;&#108;&#101;&#x2e;&#99;&#111;&#x6d;</a>&rdquo;)</p>

<p>User.where(id: 73).pluck(:first_name, :last_name)
```</p></blockquote>
]]></content>
  </entry>
  
</feed>
