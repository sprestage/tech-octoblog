<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Technical Blog]]></title>
  <link href="http://sprestage-tech-blog.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://sprestage-tech-blog.herokuapp.com/"/>
  <updated>2014-11-10T15:04:32-08:00</updated>
  <id>http://sprestage-tech-blog.herokuapp.com/</id>
  <author>
    <name><![CDATA[Susan Prestage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How do I upgrade my Ruby again?]]></title>
    <link href="http://sprestage-tech-blog.herokuapp.com/blog/2014/11/06/how-do-i-upgrade-my-ruby-again/"/>
    <updated>2014-11-06T08:47:02-08:00</updated>
    <id>http://sprestage-tech-blog.herokuapp.com/blog/2014/11/06/how-do-i-upgrade-my-ruby-again</id>
    <content type="html"><![CDATA[<p>If you want to use Rbenv on OS X you&rsquo;ll need to install the Xcode command-line tools:</p>

<pre>
  $ xcode-select --install
</pre>


<p>Then install Home Brew:</p>

<pre>
  $ ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
</pre>


<p>Complete Home Brew setup:</p>

<pre>
  $ brew doctor
  $ brew update
</pre>


<p>At this point you&rsquo;ll be able to install rbenv and ruby-build:</p>

<pre>
  $ brew install rbenv ruby-build
</pre>


<p>Add the following to your .bash_profile:</p>

<pre>
  eval "$(rbenv init -)"
</pre>


<p>Reload your bash profile settings:</p>

<pre>
  $ source ~/.bash_profile
</pre>


<p>Then you can install Ruby:</p>

<pre>
  $ rbenv install 2.1.2
</pre>


<p>Thanks to John O. at TeamTreeHouse for giving this well written response to this inquiry.</p>

<p>To set as your current version of Ruby run the following command:</p>

<pre>
  $ rvm use 2.0.0
</pre>


<p>To make it the default Ruby:</p>

<pre>
  $ rvm default 2.0.0
</pre>


<p>or</p>

<pre>
  $ rvm use 2.0.0 --default
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mastering date and time manipulation in rails.]]></title>
    <link href="http://sprestage-tech-blog.herokuapp.com/blog/2014/10/21/mastering-date-and-time-manipulation-in-rails/"/>
    <updated>2014-10-21T13:14:02-07:00</updated>
    <id>http://sprestage-tech-blog.herokuapp.com/blog/2014/10/21/mastering-date-and-time-manipulation-in-rails</id>
    <content type="html"><![CDATA[<p>There are several different ways of manipulating time in rails.  Instead of searching for them everytime I need them, I will keep there here in one easy location.</p>

<p>Rails gives built-in ways to add days (which will suit for weeks as well) and also to add months.  This means that using rails to add a month (which will suit for years as well) has built into it accomodations for February, leap years, leap centuries, etc.  Use Rails for this magic.  Do Not roll your own dating.</p>

<h2>Future and Past</h2>

<h3>By month</h3>

<pre>
  > DateTime.now
=> Tue, 21 Oct 2014 13:08:17 -0700

  > DateTime.now >> 1
=> Fri, 21 Nov 2014 13:08:44 -0700

  > DateTime.now >> -2
=> Thu, 21 Aug 2014 13:09:23 -0700
</pre>


<h3>By week</h3>

<pre>
  > DateTime.now
=> Tue, 21 Oct 2014 15:00:17 -0700

  > DateTime.now + (2 * 7)
=> Tue, 04 Nov 2014 15:00:52 -0700

  > DateTime.now - (1 * 7)
=> Tue, 14 Oct 2014 15:04:16 -0700
</pre>


<h2>Past</h2>

<pre>
  > 1.week.ago
=> Tue, 14 Oct 2014 20:20:14 UTC +00:00

  > 2.weeks.ago
=> Tue, 07 Oct 2014 20:20:27 UTC +00:00

  > 1.month.ago
=> Sun, 21 Sep 2014 20:20:34 UTC +00:00

  > 2.months.ago
=> Thu, 21 Aug 2014 20:20:41 UTC +00:00
</pre>


<h2>Date only</h2>

<pre>
  > Date.today
=> Wed, 22 Oct 2014

  > Date.today+2
=> Fri, 24 Oct 2014
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binding pry and the power of the rails console]]></title>
    <link href="http://sprestage-tech-blog.herokuapp.com/blog/2014/10/21/binding-pry-and-the-power-of-the-rails-console/"/>
    <updated>2014-10-21T13:13:17-07:00</updated>
    <id>http://sprestage-tech-blog.herokuapp.com/blog/2014/10/21/binding-pry-and-the-power-of-the-rails-console</id>
    <content type="html"><![CDATA[<p>The most powerful tool I use on a daily basis is the gem, binding.pry.</p>

<h2>Setup</h2>

<p>Put the pry-rails gem into your Gemfile for dev and test.</p>

<h6>Gemfile</h6>

<pre>
group :test, :development do
  gem 'pry-rails'
end
</pre>


<p>You will now need to run</p>

<pre>
  $ bundle install
</pre>


<p>at the command line.</p>

<h2>How to use</h2>

<p>Put the phrase &lsquo;binding.pry&rsquo; without the quotes into a piece of your code that you want to investigate and binding.pry will open up a rails console at your command line.  This even works in test files.  If you need this in the middle of a haml file, be sure to obey the tabbing convention required by haml, and also put a &lsquo;-&rsquo; dash in front of the binding.pry, like so:</p>

<h6>Ruby file syntax</h6>

<pre>
  binding.pry
</pre>


<h6>Haml file syntax</h6>

<pre>
  - binding.pry
</pre>


<p>Remember, you will need to type exit out of the rails console and to return your server to  whatever it was doing before it hit the binding.pry.</p>

<p>This is particularly useful to see the current scope of variables and also to look at what is in the database.</p>

<pre>
  > Company.find(7).users.find(24)

  > Company.find(7).team_memberships

  > Company.find(7).users.find(26)

  > Company.find(7).users

  > Company.all

  > c = Company.find(7)

  > c.users

  > User.where(id: 45)

  > User.where(email: "susan@example.com")

  > User.where(id: 73).pluck(:first_name, :last_name)
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to do database stuff from within Rails]]></title>
    <link href="http://sprestage-tech-blog.herokuapp.com/blog/2014/10/13/how-to-do-database-stuff-from-within-rails/"/>
    <updated>2014-10-13T11:52:35-07:00</updated>
    <id>http://sprestage-tech-blog.herokuapp.com/blog/2014/10/13/how-to-do-database-stuff-from-within-rails</id>
    <content type="html"><![CDATA[<h3>Rails Console</h3>

<p>The rails console is one of the most powerful debug and development tools.  Most particularly, for database manipulation.</p>

<p>Here are some of my most frequently used commands:</p>

<p>Here are some of my much less frequently used, but very powerful and sometimes necessary.  As a rule, I try to only examine what is in my database from the console.  Creating and deleting records from the command line really isn&rsquo;t the way you want to manipulate your database.  That said, sometimes to have to:</p>

<h4>Create</h4>

<pre>
  > u = User.create password: "mypasswd", first_name: "test", last_name: "testovich"
</pre>


<h4>Update</h4>

<pre>
  > u = User.find(30)
  > u.update_attributes(roles_mask: 3)
</pre>


<p>If the above doesn&rsquo;t work, this may:</p>

<pre>
  > User.where(id: 27)[0].update(age: 42, next_birthday: "2014-10-14")
</pre>


<h4>Destroy</h4>

<pre>
  > User.find(30).destroy
</pre>


<h3>Backup &amp; Restore</h3>

<pre>
  $ pg_dump -U featherlight featherlight_development -Fc > backup.dump
</pre>


<p>The first command seems to be the one that works</p>

<pre>
  $ pg_restore -c -C -F c -v -U postgres backup.dump
  $ pg_restore -U featherlight -d featherlight_development backup.dump
</pre>


<h3>Creating a database and user</h3>

<pre>
  $ createuser portfolio
  Shall the new role be a superuser? (y/n) n
  Shall the new role be allowed to create databases? (y/n) n
  Shall the new role be allowed to create more new roles? (y/n) n
  CREATE ROLE
  $
</pre>




<pre>
  $ createdb portfolio_test -O portfolio
</pre>


<ul>
<li>-O owner name is the option in the command line.</li>
</ul>


<h3>Queries with date ranges</h3>

<pre>
  FeedbackRequest.where(created_at: 5.days.ago..4.days.ago)
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String manipulation in Ruby]]></title>
    <link href="http://sprestage-tech-blog.herokuapp.com/blog/2014/03/21/string-manipulation-in-ruby/"/>
    <updated>2014-03-21T12:12:17-07:00</updated>
    <id>http://sprestage-tech-blog.herokuapp.com/blog/2014/03/21/string-manipulation-in-ruby</id>
    <content type="html"><![CDATA[<h1>Set vs concantenate</h1>

<p>Set equal to this string.  No initialization needed.</p>

<pre>
> farewell = "Good"  
</pre>




<pre>
> puts farewell
</pre>


<p>will return</p>

<pre>
  => Good
</pre>


<p>Concantenation requires the variable to be initialized.  This only works because the variable was initialized above.</p>

<pre>
> farewell << "bye!"  
</pre>




<pre>
> puts farewell
</pre>


<p></p>

<p>will return</p>

<pre>
  => Goodbye!
</pre>


<h1>String operations</h1>

<p>Find where a substring is within the source string using index.</p>

<pre>
"hello".index('e')             #=> 1
"hello".index('lo')            #=> 3
"hello".index('a')             #=> nil
"hello".index(?e)              #=> 1
"hello".index(/[aeiou]/, -3)   #=> 4
</pre>


<p>Take input from the user:</p>

<pre>
puts "Please input some text: "
foo = gets.chomp
puts foo
</pre>


<p>If you are using ARGV to bring in command line arguments when you launch your app, you will run into conflict when using gets.  You can work around this two ways.  First is to use perform whatever tasks you need to on ARGV, then:</p>

<pre>
ARGV.clear
foo = gets.chomp
</pre>


<p>Otherwise, everytime you call gets, you will need to specify that it is from IO, not Kernal:</p>

<pre>
foo = $stdin.gets.chomp
</pre>


<p>Replace the first instance of the sub_string, &ldquo;replace_me&rdquo;, with the contents of foo.</p>

<pre>
bar = bar.sub("replace_me", foo)
</pre>


<p>Globally replace the sub_string, &ldquo;replace_me&rdquo;, with the contents of foo.</p>

<pre>
bar = bar.<b>g</b>sub("replace_me", foo)
</pre>


<p>Find the first example of substring, &ldquo;find_me&rdquo;.  This is most often used with regex in place of the &ldquo;find_me&rdquo; string.  Returns a string.</p>

<pre>
bing = bar.match("find_me")
</pre>


<p>Find the every example of substring, &ldquo;find_me&rdquo;.  This is most often used with regex in place of the &ldquo;find_me&rdquo; string.  Returns an array of strings.</p>

<pre>
bing = bar.scan("find_me")
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What were those Octopress commands again?]]></title>
    <link href="http://sprestage-tech-blog.herokuapp.com/blog/2014/03/19/what-were-those-octopress-commands-again/"/>
    <updated>2014-03-19T12:30:59-07:00</updated>
    <id>http://sprestage-tech-blog.herokuapp.com/blog/2014/03/19/what-were-those-octopress-commands-again</id>
    <content type="html"><![CDATA[<p>Create a new post:</p>

<pre>
    $ rake new_post["What were those Octopress commands again?"]
</pre>


<p>Incorporate that post into your site:</p>

<pre>
    $ rake generate
</pre>


<p>If POW is setup, you can just run:</p>

<pre>
    $ rake watch
</pre>


<p>Load the following in your browser to see how things look.</p>

<pre>
http://octopress.dev
</pre>


<p>Happy with how everything looks?  Commit your code and push to the livesite.</p>

<p>If you are working on two different blogs, you will need to switch back and forth in POW the directory that is being looked at:</p>

<pre>
    $ cd ~/.pow
    $ ln -s /path/to/octopress octopress
</pre>


<p>On that rare occasion that you change your _config.yml, you will need to run a special command, since rake generate doesn&rsquo;t do what is needed.  Look out though, if you&rsquo;ve customized your blog such as with Octostrap3, this will undo your changes, so use with caution.</p>

<pre>
    $ rake update_source
</pre>


<h1>Thanks</h1>

<p>Thank you to the Octopress docs site for well written and easy to follow documentation.  This is my most frequently refered to page, now that my site is up and running, <a href="http://octopress.org/docs/blogging/">http://octopress.org/docs/blogging/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quickly create a rails app with 2 working resources]]></title>
    <link href="http://sprestage-tech-blog.herokuapp.com/blog/2013/12/07/quickly-create-a-rails-app-with-2-working-resources/"/>
    <updated>2013-12-07T14:48:17-08:00</updated>
    <id>http://sprestage-tech-blog.herokuapp.com/blog/2013/12/07/quickly-create-a-rails-app-with-2-working-resources</id>
    <content type="html"><![CDATA[<h1>Intro</h1>

<p>I created this rails app in preparation to learn about resource associations.  This was the basic app I created before I implemented anything complicated.  It is a good demonstration of how to generate the rails app, the resoursces, and the tests.  I also go through several steps to get the app ready to be tested using minitest and also how to lock down the app from a security perspective.</p>

<p>This is a simple rails app, with a pair of resources, Doctors and Patients.</p>

<h1>Preparation</h1>

<h2>Generate rails app</h2>

<pre>
  $ rails _3.2.16_ new DoctorPatientTracker --skip-test-unit

  $ cd DoctorPatientTracker
</pre>


<h2>Prepare for testing</h2>

<p>Edit Gemfile for some useful debugging gems.  Then run bundler</p>

<pre>
  $ bundle
</pre>


<h2>Secure your app</h2>

<p>Tuck away RAILS_SECRET from /config/initializer/secret_token.rb to /config/application.yml and add /config/application.yml to .gitignore.</p>

<h2>Implement some basics</h2>

<p>Add a home page, /app/views/home/index.html.erb
Add a home controller, /app/controllers/home_controller.rb
Add a default route to /config/routes.rb
  root :to => &lsquo;home#index&rsquo;</p>

<hr />

<h1>You should now have a working rails app</h1>

<h2>Check in frequently</h2>

<p>Check everything into git and git hub so yous have this default rails app set in stone.</p>

<h2>Create 1st resource scaffold</h2>

<p>Create the scaffold for the new resource, Doctor.</p>

<pre>
  $ rails g scaffold Doctor name:string --no-test-framework --no-assets --no-stylesheets --no-scss
</pre>


<h2>Migrate the DB for 1st resource</h2>

<p>Migrate the database to pick up the changes.</p>

<pre>
  $ rake db:migrate
</pre>


<h2>Create tests for 1st resource</h2>

<p>I know I should probably create all the tests first, but I feel so lost
without the stuff there first, ya know.</p>

<p>Create the tests using generate, then completely replace what is in the files.</p>

<pre>
  $ rails g mini_test:feature DoctorShowIndex

  $ rails g mini_test:feature DoctorShow

  $ rails g mini_test:feature DoctorCreate

  $ rails g mini_test:feature DoctorUpdate

  $ rails g mini_test:feature DoctorDelete
</pre>


<p>Add /test/ folder.  Add /test/doctors/ folder.  Move doctor tests. Then
add fixture support to /test/test_helper.rb</p>

<h2>Modify views for 1st resource</h2>

<p>Add Doctor name to display on /doctors/new page</p>

<p>Edit all the 5 /views/doctors/*.html.erb to display the fields from the
models.</p>

<h2>Run the tests for 1st resource</h2>

<p>Make sure all Doctor stuff works.</p>

<pre>
  $ rake
</pre>


<h2>Create 2nd resource scaffold</h2>

<p>Time to implement Patients:</p>

<pre>
  $ rails g scaffold Patient name:string --no-test-framework --no-assets --no-stylesheets --no-scss
</pre>


<h2>Create tests for 2nd resource</h2>

<p>Then create the Patient tests:</p>

<pre>
  $ rails g mini_test:feature PatientShowIndex

  $ rails g mini_test:feature PatientShow

  $ rails g mini_test:feature PatientCreate

  $ rails g mini_test:feature ItemUpdate

  $ rails g mini_test:feature ItemDelete
</pre>


<p>Add /test/patients/ folder.  Move patient tests.</p>

<h2>Migrate DB for 2nd resource</h2>

<p>Add Patients to the DB:</p>

<pre>
  $ rake db:migrate
</pre>


<h2>Modify views for 2nd resource</h2>

<p>Add Patient name to display on /patients/new page</p>

<p>Edit all the 5 /views/patients/*.html.erb to display the fields from the
models.</p>

<h2>Run the tests for 2nd resource</h2>

<p>Make sure all Patient stuff works.</p>

<pre>
  $ rake
</pre>


<h1>Final notes</h1>

<p>You now have a working rails application with two resources, some minitests, a bit of security lockdown, and some useful views for the app.</p>

<p>Thank you for reading.  I hope you found this useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I like VI]]></title>
    <link href="http://sprestage-tech-blog.herokuapp.com/blog/2013/12/06/why-i-like-vi/"/>
    <updated>2013-12-06T13:08:54-08:00</updated>
    <id>http://sprestage-tech-blog.herokuapp.com/blog/2013/12/06/why-i-like-vi</id>
    <content type="html"><![CDATA[<h2>What is VI</h2>

<p>VI is a powerful, but brutal, command line text editor available on all unix-based systems.</p>

<p>I discovered VI while at university studying for my computer engineering degree.  The joke at the time was that VI is &lsquo;user VIolent&rsquo;.  It is hard to deny this perspective, especially as I share it.  After my first couple of stumblings into inadvertant launchings of vi, my unix mentor sat down with me a first taught me how to get the heck out of there, and then taught me how to leverage it to my own benefit.</p>

<p>The biggest benefits to me are:
1. The ease with which I can jump around my document by line/word/page.
2. The ability to copy/paste/delete my chosen number of words or lines.</p>

<p>For any quick little documents I need to write, I am usually happiest in vi.</p>

<h2>Command mode vs Insert mode</h2>

<p>Vi has two modes of operation.  Command mode and Insert mode.  Command mode takes commands which cause action to be taken on the file you are working on.  Insert mode is where entered text is inserted into the file.</p>

<h4>Command mode</h4>

<ul>
<li>In the command mode, every character typed is a command that does something to the text file being edited; a character typed in the command mode may even cause the vi editor to enter the insert mode.</li>
</ul>


<h4>Insert mode</h4>

<ul>
<li>In the insert mode, every character typed is added to the text in the   file; pressing the \<Esc> (Escape) key turns off the Insert mode.</li>
</ul>


<h2>Commands</h2>

<h4>Starting/exiting vi</h4>

<p>How to get into vi in the first place.  From your command line:</p>

<pre>
vi your_filename
</pre>


<p>To exit vi and save changes:</p>

<pre>
:wq
</pre>


<p>To exit vi without saving changes:</p>

<pre>
:q!
</pre>


<p>And most importantly, to enter vi command mode:</p>

<pre>
[esc]
</pre>


<p>The commands can be broken into a several categories.</p>

<h4>Cursor movement</h4>

<h4>Screen movement</h4>

<h4>Alter text</h4>

<h6>Insert or add text</h6>

<h6>Change text</h6>

<h6>Delete text</h6>

<h2>Search</h2>

<h2>File input/output</h2>

<h2>Miscellaneous</h2>

<p><br></p>

<hr />

<h3>NOTE</h3>

<p>Both UNIX and vi are case-sensitive. Be sure not to use a capital letter in place of a lowercase letter; the results will not be what you expect.</p>

<h2>Fini</h2>

<p>Thank you for reading.  I hope you found this useful.  I invite you to read my next post if you are interested in learning how to create a basic rails application with two resources, some minitests, a bit of security lockdown, and some useful views for the app.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How the unix .alias file can make your command line life better]]></title>
    <link href="http://sprestage-tech-blog.herokuapp.com/blog/2013/12/04/unix-alias-file/"/>
    <updated>2013-12-04T12:50:52-08:00</updated>
    <id>http://sprestage-tech-blog.herokuapp.com/blog/2013/12/04/unix-alias-file</id>
    <content type="html"><![CDATA[<h2>Intro to .alias</h2>

<p>Why use command aliases in unix.</p>

<h2>How to implement</h2>

<p>Command aliases in unix.</p>

<h4>location</h4>

<pre><code>- where to location of the alias file 
- what is the alias file called 
</code></pre>

<h4>sourcing</h4>

<pre><code>- how to source it manually and automatically
</code></pre>

<h2>Favorite shortcuts</h2>

<pre><code>- talk about my 10 favorite shortcuts
    va
    sc
    la
    l
    cf
    h
    ls
    a
    rm -i
</code></pre>

<h2>Remembering new commands</h2>

<pre><code>- also a good way of noting down commands you just learned and want to use much more, and want to get the syntax down before you forget
</code></pre>

<h2>Protect from unfortunate commands</h2>

<h2>Fini</h2>

<p>Thank you for reading.  I hope you found this useful.  I invite you to read my next post if you are interested in learning about vi and why I like it so much.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My favorite unix commands]]></title>
    <link href="http://sprestage-tech-blog.herokuapp.com/blog/2013/12/03/my-favorite-unix-commands/"/>
    <updated>2013-12-03T16:03:22-08:00</updated>
    <id>http://sprestage-tech-blog.herokuapp.com/blog/2013/12/03/my-favorite-unix-commands</id>
    <content type="html"><![CDATA[<pre>
type (for when where doesn't tell me what I want)

tree
</pre>


<p>erase line</p>

<pre>
[ctrl] + u
</pre>


<p>stop program</p>

<pre>
[ctrl] + c
</pre>


<p>no really, stop the danged program</p>

<pre>
[ctrl] + d
</pre>




<pre>
ps
ps -ef
ps -x
ps -a
</pre>


<p>different for different systems, I&rsquo;ve found over the years of using different unix systems.</p>

<pre>
kill _process_id_

</pre>


<pre>
~ for my own directory
. for here
.. for one directory above
</pre>


<p>print working directory</p>

<pre>
pwd 
</pre>


<h2>Fini</h2>

<p>Thank you for reading.  I hope you found this useful.  I invite you to read my next post if you are interested in learning how to use the unix .alias file to make your command line experience more pleasurable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My personal Git command reference]]></title>
    <link href="http://sprestage-tech-blog.herokuapp.com/blog/2013/12/02/my-personal-git-command-reference/"/>
    <updated>2013-12-02T18:47:42-08:00</updated>
    <id>http://sprestage-tech-blog.herokuapp.com/blog/2013/12/02/my-personal-git-command-reference</id>
    <content type="html"><![CDATA[<h1>Git Basics</h1>

<h2>Setting up a new project</h2>

<h3>Set up the local repository</h3>

<p>Brand new project.  Start in the project directory.  Then:</p>

<pre>
  $ git init
</pre>


<p>Ready to stage your commits?  Here is the long way:</p>

<pre>
  $ git add .
  $ git commit -m "Initial commit"
</pre>


<p>Here is a useful short way to do both of the above commands at once:</p>

<pre>
  $ git commit -am "Initial commit"
</pre>


<h3>Set up remote repository</h3>

<p>Point to a new repo on github.  Note: must create this new repo on github first!</p>

<pre>
  $ git remote add origin https://github.com/&ltusername>/&ltyour_new_app_name>.git
</pre>


<p>Show the remote repositories that are being pointed to:</p>

<pre>
  $ git remote -v
</pre>


<p>List remote and local branches:</p>

<pre>
  $ git branch -a
</pre>


<p>Push to github:</p>

<pre>
  $ git push -u origin master
</pre>


<h3>Set up Heroku</h3>

<p>First, go to Heroku and create a new repo.
Next, push to heroku:</p>

<pre>
  $ heroku create
  $ git push heroku master
  $ heroku run rake db:migrate
</pre>


<p>Further pushes to heroku</p>

<pre>
  $ git push heroku master
</pre>


<p>If you encounter problems, this will show you the logs on Heroku for diagnostics</p>

<pre>
  $ heroku logs
</pre>


<h2>Frequent staging, commiting, and pushing</h2>

<p>Even better is that if you are working offline, you can keep staging and committing.  Then push all to the remote repository at once when you have internet connectivity again.</p>

<pre>
  $ git add .
  $ git commit -m "brief explanation of changes here"
  $ git push
</pre>


<h3>What is the status of your files</h3>

<p>How is git looking (you will find some useful guidance printed out with this command too):</p>

<pre>
  $ git status
</pre>


<h1>Branching</h1>

<h3>New branch exists on remote</h3>

<h4>New branches on github</h4>

<p>So, your teammate has been working on a new branch they just created and then commited to github.  You now want to start working locally on that new branch.</p>

<pre>
  $ git fetch origin bug-request-id
  $ git checkout bug-request-id
</pre>


<h4>Several new branches on github</h4>

<p>You&rsquo;ve been heads down on your work on a branch and your team has created several new branches remotely on github and now you need to start contributing to those branches.  To get look at what the remote branches are,</p>

<pre>
  $ git fetch
</pre>


<p>Now you will see everything on the remote when you want to list your local and remote branches with this command:</p>

<pre>
  $ git branch -a
</pre>


<p>Finally, to bring the remote branch code down to your local, once you fetched:</p>

<pre>
  $ git checkout bug-request-id
</pre>


<h3>Create new branch locally</h3>

<h4>Starting the new branch locally</h4>

<p>First, create the branch locally.  This automatically changes you to this branch locally.</p>

<pre>
  $ git checkout -b new_branch_name
</pre>


<h4>Pushing the new branch to github</h4>

<p>To check this into github, do this and the new branch will automatically get created on github,
then your code will get pushed into that branch.</p>

<pre>
  $ git push origin new_branch_name
</pre>


<h3>Good git references</h3>

<p>Also very useful are these links:
<a href="http://www.ndpsoftware.com/git-cheatsheet.html#loc=workspace;">http://www.ndpsoftware.com/git-cheatsheet.html#loc=workspace;</a>
<a href="http://git-scm.com/book">http://git-scm.com/book</a>
<a href="http://techblog.susanprestage.com/blog/2013/12/02/my-personal-git-command-reference/">http://techblog.susanprestage.com/blog/2013/12/02/my-personal-git-command-reference/</a></p>

<h3>Working with a branch</h3>

<p>Use this to confirm WHICH branch you are on.</p>

<pre>
  $ git branch
  $ git add .
  $ git commit -m "a good commit message"
  $ git push origin new_branch_name
</pre>


<p>Very important tips for switching between branches.  ALWAYS commit your changes to your current branch before changing branches.  I assumed the files would stay in the old branch as I switched to the new branch, but NO.  The changes will follow you around like a lost puppy until you commit them.</p>

<h3>Merging your branch(es)</h3>

<p>Ok, I&rsquo;ve got this branch (or worse, several branches).  I&rsquo;m done working on them.  They are all checked in, as branches.  But now, I need to get the master branch back up to date.  How do I do this with FIVE branches.  Don&rsquo;t panic, we can do this thing.  First, make sure everything is up to date and checked in.</p>

<pre>
  $ git status
</pre>


<p>Then, get onto the master branch.</p>

<pre>
  $ git checkout master
</pre>


<p>Now we are going to merge each branch in, push it to github, and then delete the branch since we are done with them.  Skip the last step if you aren&rsquo;t quite done with the branch.</p>

<pre>
  $ git merge chapter_2
  $ git push origin master    (also can just usually say 'git push' here)
  $ git branch -d chapter_2

  $ git merge chapter_3
  $ git push
  $ git branch -d chapter_3
</pre>


<p>Repeat until you&rsquo;ve merged in each branch.  Yeay!  This worked for me and I saw what I wanted on github.  I have both the branches I expect as well as each branch merge present as a commit on the master.  Excellent!  Git is starting to be a Very useful tool instead of an occasional impediment.  :)</p>

<h1>Stashing</h1>

<p>In the middle of some work on another branch and have to interrupt and get back to the master for some reason?  Do this.  First see what you are working on</p>

<pre>
  $ git diff
</pre>


<p>Save working directory and index state WIP on my_branch and restores last commit.</p>

<pre>
  $ git stash save
</pre>


<p>Now these return nothing</p>

<pre>
  $ git diff
  $ git status
</pre>


<p>Now get back to master and update:</p>

<pre>
  $ git checkout master
  $ git pull
</pre>


<p>When done, get back to our stashed work:</p>

<pre>
  $ git checkout my_branch
  $ git stash apply
</pre>


<p>Verify we are in the same place:</p>

<pre>
  $ git diff

  $ git stash list
  $ git stash apply stash@{1}
  $ git stash drop
</pre>


<h2>Whoops!  Now what do I do?</h2>

<p>To check out a particular commit, use</p>

<pre>
  $ git checkout &ltsha1>
</pre>


<p>To revert changes made to your working copy, do this</p>

<pre>
  $ git checkout .
</pre>


<p>This will create three separate revert commits:</p>

<pre>
  $ git revert 0766c053 25eee4ca a867b4af
</pre>


<p>It also takes ranges. This will revert the last two commits:</p>

<pre>
  $ git revert HEAD~2..HEAD
</pre>


<p>To get just one, you could use <code>rebase -i</code> to squash them afterwards  Or, you could do it manually (be sure to do this at top level of the repo) get your index and work tree into the desired state, without changing HEAD:</p>

<pre>
  $ git checkout 0d1d7fc32 .
</pre>


<p>and then commit</p>

<pre>
  $ git commit    # be sure and write a good message describing what you just did
</pre>


<p>I don&rsquo;t like my past several commits.  I want to go back to a particular commit.  Reset may be a BAD, BAD way of doing things, so look out!</p>

<pre>
  $ git reset --hard HEAD~5
</pre>


<h2>Powerful commands</h2>

<p>Stuff I&rsquo;m using regularly these days</p>

<h3>Unstage</h3>

<p>Reset the staging area to match the most recent commit, but leave the working directory unchanged. This unstages all files without overwriting any changes, giving you the opportunity to re-build the staged snapshot from scratch.</p>

<pre>
  $ git reset
</pre>


<p>Reset the staging area and the working directory to match the most recent commit. In addition to unstaging changes, the &ndash;hard flag tells Git to overwrite all changes in the working directory, too. Put another way: this obliterates all uncommitted changes, so make sure you really want to throw away your local developments before using it.</p>

<pre>
  $ git reset --hard
</pre>


<p>Careful: <code>git reset &ndash;hard</code> WILL DELETE YOUR WORKING DIRECTORY CHANGES. Be sure to stash any local changes you want to keep before running this command.</p>

<p>Assuming you are sitting on that commit, then this command will wack it&hellip;</p>

<pre>
  $ git reset --hard HEAD~1
</pre>


<p>The HEAD~1 means the commit before head.</p>

<p>Or, you could look at the output of git log, find the commit id of the commit you want to back up to, and then do this:</p>

<pre>
  $ git reset --hard <sha1-commit-id>
</pre>


<p>If you REALLY want to rewrite history.  Think very, very carefully about this BEFORE doing it.</p>

<pre>
  $ git reset --hard <old-commit-id>
  $ git push -f
</pre>


<h3>Switch to specific commit</h3>

<p>Temporarily switch to a different commit</p>

<p>If you want to temporarily go back to it, fool around, then come back to where you are, all you have to do is check out the desired commit:</p>

<pre>
  # This will detach your HEAD, that is, leave you with no branch checked out:

  $ git checkout 0d1d7fc32
</pre>


<p>Or if you want to make commits while you&rsquo;re there, go ahead and make a new branch while you&rsquo;re at it:</p>

<pre>
  git checkout -b old-state 0d1d7fc32
</pre>


<h3>Merge</h3>

<p>How to merge the master branch into the feature branch? Easy:</p>

<pre>
  $ git checkout feature1
  $ git merge master
</pre>


<p>Merge branch back into master</p>

<pre>
  $ git checkout master
  $ git merge my_branch
</pre>


<h3>Merge conflict</h3>

<p>When there is a conflict during a merge, you have to finish the merge commit manually. It sounds like you&rsquo;ve done the first two steps, to edit the files that conflicted and then run</p>

<pre>
  $ git add
</pre>


<p>on them to mark them as resolved.</p>

<p>Finally, you need to actually commit the merge with</p>

<pre>
  $ git commit
</pre>


<p>after which you will be able to switch branches again.</p>

<h3>Have I forgotten to push?</h3>

<p>How do I tell if my commited changes have been pushed to github?</p>

<pre>
  $ git log origin/master..HEAD
</pre>


<p>You can also view the diff using the same syntax</p>

<pre>
  $ git diff origin/master..HEAD
</pre>


<h3>Duplicate a branch</h3>

<p>Copy old_branch into a new_branch.  (Useful for trying out a merge you are worried about.)</p>

<pre>
  $ git checkout old_branch
  $ git branch new_branch
  $ git checkout new_branch
</pre>


<h3>Destroy local branch</h3>

<p>Get rid of a branch and everything in it changed or not.  (Useful after you&rsquo;ve tried out a merge on a temporary branch.)</p>

<p>First, you have to get rid of the changes:</p>

<pre>
  $ git reset --hard HEAD
</pre>


<p>Next, change to a different, good branch</p>

<pre>
  $ git checkout master
</pre>


<p>Lastly, delete the branch</p>

<pre>
  $ git branch -d temporary_branch
</pre>


<p>you may need to use a -D option to force this.  BE CAREFUL not to delete something you care about.  Really!</p>

<h3>Tidy up leftovers</h3>

<p>Once you delete the branch from the remote, you can prune to get rid of remote tracking branches with:</p>

<pre>
  $ git branch -r -d origin/newfeaturebranch
</pre>


<p>This will prune All of your old references to already-deleted-on-github branches.</p>

<pre>
  $ git remote prune origin
</pre>


<h2>Fini</h2>

<p>Thank you for reading.  I hope you found this useful.  I invite you to read my next post if you are interested in the unix commands that I find most useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Overcoming my fear of Git through knowledge]]></title>
    <link href="http://sprestage-tech-blog.herokuapp.com/blog/2013/12/01/overcoming-my-fear-of-git-through-knowledge/"/>
    <updated>2013-12-01T18:59:42-08:00</updated>
    <id>http://sprestage-tech-blog.herokuapp.com/blog/2013/12/01/overcoming-my-fear-of-git-through-knowledge</id>
    <content type="html"><![CDATA[<h2>Getting past my fear of Git</h2>

<p>Git kept scaring me.  Mostly, this fear is based on how wonderfully powerful a tool that Git (and github) can be and my lack of easy comfort with the commands.  So, I&rsquo;ve made a list of my most used commands and any notes I need for use.  This goes a bit long, since as I learned more and more commands, I added more that I was starting to use.  Good luck!</p>

<h2>What is Git</h2>

<h4>Basics</h4>

<p>Git is a version control system, VCS.  Don&rsquo;t think too carefully about the other VCSs you know, like Perforce or Subversion.  Git is much different and trying to compare will likely cause confusion.</p>

<h4>Snapshots, instead of differences</h4>

<p>Most other systems tend to store data as changes to a base version of each file.  Git doesn&rsquo;t think of it&rsquo;s data that way.  Instead, Git thinks of its data more like a set of snapshots of a mini-filesystem.  And, to be efficient, Git only takes a snapshot of the files that have changed, simply linking to all the other files that have not changed.</p>

<h4>Local</h4>

<p>Most operations you perform with Git will be local. The entire history of your repository will be right there on your machine, which means that diffs and browsing the history of your project is very quick.  This also means that working offline is not a problem.  You simply commit all you like while offline, then push your work up to the remote repository server when you get back to a network connection.</p>

<h4>The Three States of Git</h4>

<h6>1. The Working Directory</h6>

<h6>2. The Staging Area</h6>

<h6>3. The Git Repository</h6>

<p><a target="_blank" href="#blog"><img class="img-portfolio img-responsive" src="https://s3-us-west-2.amazonaws.com/technicalblog/three_states_of_git.png" width="340" height="284"></a></p>

<p>Git has three main states that your files can reside in: commited, modified, and staged.  Commited means that the data is safely stored in your local repository.  Modified means that you have changed the file, but not yet commited it to your local repository.  Staged means that you have marked a modified file to go into your next commit snapshot.</p>

<ul>
<li><p>Check out the project to bring the files from the git repository into your working directory.</p></li>
<li><p>Stage your files to bring those changes from your working directory to the staging area.</p></li>
<li><p>Commit your files to bring the changes from the staging area to the git repository.</p></li>
</ul>


<p>Your workflow will be something like this:</p>

<ol>
<li>Modify files in your working directory.</li>
<li>Stage the files.  This adds snapshots of them to the staging area.</li>
<li>Commit your changes.  This takes the files as they are in the staging area and stores that snapshot in your git repository.</li>
</ol>


<h2>Getting started with Git</h2>

<p>To install and setup Git, go here and follow the very good instructions.</p>

<ul>
<li><a href="http://git-scm.com/book/en/Getting-Started-Installing-Git">http://git-scm.com/book/en/Getting-Started-Installing-Git</a></li>
<li><a href="http://git-scm.com/book/en/Getting-Started-First-Time-Git-Setup">http://git-scm.com/book/en/Getting-Started-First-Time-Git-Setup</a></li>
</ul>


<p>I highly recommend the entire <a href="http://git-scm.com/documentation">http://git-scm.com/documentation</a> site.  For a more thorough explanation of Git, what it is and how it works, I particularly recommend this chapter <a href="http://git-scm.com/book/en/Getting-Started-Git-Basics.">http://git-scm.com/book/en/Getting-Started-Git-Basics.</a></p>

<h2>Final notes on Git</h2>

<p>I have found that it is important to stage and commit your files often and in small increments.  Any time you have a change that makes sense as its own commit, do so.  If what you are working on is so big that you think you ought to wait to commit, then I strongly recommend branching and then again you should be able to break down your commits within that branch.  You really want to be able to track what you did later, both for yourself and for others trying to maintain your code.</p>

<h2>Fini</h2>

<p>Thank you for reading.  I hope you found this useful.  I invite you to read my next post if you are interested in the Git commands that I find most useful.</p>
]]></content>
  </entry>
  
</feed>
