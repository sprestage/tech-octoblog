<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Technical Blog]]></title>
  <link href="http://techblog.susanprestage.com//atom.xml" rel="self"/>
  <link href="http://techblog.susanprestage.com//"/>
  <updated>2016-01-17T11:52:13-08:00</updated>
  <id>http://techblog.susanprestage.com//</id>
  <author>
    <name><![CDATA[Susan Prestage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How Do I Upgrade My Ruby Again?]]></title>
    <link href="http://techblog.susanprestage.com//blog/2014/11/06/how-do-i-upgrade-my-ruby-again/"/>
    <updated>2014-11-06T08:47:02-08:00</updated>
    <id>http://techblog.susanprestage.com//blog/2014/11/06/how-do-i-upgrade-my-ruby-again</id>
    <content type="html"><![CDATA[<p>If you want to use Rbenv on OS X you&rsquo;ll need to install the Xcode command-line tools:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ xcode-select --install</span></code></pre></td></tr></table></div></figure>


<p>Then install Home Brew:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"</span></code></pre></td></tr></table></div></figure>


<p>Complete Home Brew setup:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ brew doctor
</span><span class='line'>  $ brew update</span></code></pre></td></tr></table></div></figure>


<p>At this point you&rsquo;ll be able to install rbenv and ruby-build:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ brew install rbenv ruby-build</span></code></pre></td></tr></table></div></figure>


<p>Add the following to your .bash_profile:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  eval "$(rbenv init -)"</span></code></pre></td></tr></table></div></figure>


<p>Reload your bash profile settings:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ source ~/.bash_profile</span></code></pre></td></tr></table></div></figure>


<p>Then you can install Ruby:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ rbenv install 2.1.2</span></code></pre></td></tr></table></div></figure>


<p>Thanks to John O. at TeamTreeHouse for giving this well written response to this inquiry.</p>

<p>To set as your current version of Ruby run the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ rvm use 2.0.0</span></code></pre></td></tr></table></div></figure>


<p>To make it the default Ruby:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ rvm default 2.0.0</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ rvm use 2.0.0 --default</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Were Those Octopress Commands Again?]]></title>
    <link href="http://techblog.susanprestage.com//blog/2014/03/19/what-were-those-octopress-commands-again/"/>
    <updated>2014-03-19T12:30:59-07:00</updated>
    <id>http://techblog.susanprestage.com//blog/2014/03/19/what-were-those-octopress-commands-again</id>
    <content type="html"><![CDATA[<p>Create a new post:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake new_post["What were those Octopress commands again?"]</span></code></pre></td></tr></table></div></figure>


<p>Incorporate that post into your site:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake generate</span></code></pre></td></tr></table></div></figure>


<p>If POW is setup, you can just run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake watch</span></code></pre></td></tr></table></div></figure>


<p>Load the following in your browser to see how things look.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://octopress.dev</span></code></pre></td></tr></table></div></figure>


<p>Or possibly</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://&lt;name_of_blog&gt;.dev</span></code></pre></td></tr></table></div></figure>


<p>Happy with how everything looks?  Commit your code and push to the livesite.</p>

<p>If you are working on two different blogs, you will need to switch back and forth in POW the directory that is being looked at:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd ~/.pow
</span><span class='line'>$ ln -s /path/to/octopress octopress</span></code></pre></td></tr></table></div></figure>


<p>On that rare occasion that you change your <code>_config.yml</code>, you will need to run a special command, since rake generate doesn&rsquo;t do what is needed.  Look out though, if you&rsquo;ve customized your blog such as with Octostrap3, this will undo your changes, so use with caution.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake update_source</span></code></pre></td></tr></table></div></figure>


<h2>How to restart the POW server</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ touch ~/.pow/restart.txt</span></code></pre></td></tr></table></div></figure>


<h1>Thanks</h1>

<p>Thank you to the Octopress docs site for well written and easy to follow documentation.  This is my most frequently referred to page, now that my site is up and running, <a href="http://octopress.org/docs/blogging/">http://octopress.org/docs/blogging/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quickly Create a Rails App With 2 Working Resources]]></title>
    <link href="http://techblog.susanprestage.com//blog/2013/12/07/quickly-create-a-rails-app-with-2-working-resources/"/>
    <updated>2013-12-07T14:48:17-08:00</updated>
    <id>http://techblog.susanprestage.com//blog/2013/12/07/quickly-create-a-rails-app-with-2-working-resources</id>
    <content type="html"><![CDATA[<h1>Intro</h1>

<p>I created this rails app in preparation to learn about resource associations.  This was the basic app I created before I implemented anything complicated.  It is a good demonstration of how to generate the rails app, the resources, and the tests.  I also go through several steps to get the app ready to be tested using minitest and also how to lock down the app from a security perspective.</p>

<p>This is a simple rails app, with a pair of resources, Doctors and Patients.</p>

<h1>Preparation</h1>

<h2>Generate rails app</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ rails _3.2.16_ new DoctorPatientTracker --skip-test-unit
</span><span class='line'>
</span><span class='line'>  $ cd DoctorPatientTracker</span></code></pre></td></tr></table></div></figure>


<h2>Prepare for testing</h2>

<p>Edit Gemfile for some useful debugging gems.  Then run bundler</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ bundle</span></code></pre></td></tr></table></div></figure>


<h2>Secure your app</h2>

<p>Tuck away RAILS_SECRET from /config/initializer/secret_token.rb to /config/application.yml and add /config/application.yml to .gitignore.</p>

<h2>Implement some basics</h2>

<p>Add a home page, /app/views/home/index.html.erb
Add a home controller, /app/controllers/home_controller.rb
Add a default route to /config/routes.rb
  root :to => &lsquo;home#index&rsquo;</p>

<hr />

<h1>You should now have a working rails app</h1>

<h2>Check in frequently</h2>

<p>Check everything into git and git hub so yous have this default rails app set in stone.</p>

<h2>Create 1st resource scaffold</h2>

<p>Create the scaffold for the new resource, Doctor.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ rails g scaffold Doctor name:string --no-test-framework --no-assets --no-stylesheets --no-scss</span></code></pre></td></tr></table></div></figure>


<h2>Migrate the DB for 1st resource</h2>

<p>Migrate the database to pick up the changes.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ rake db:migrate</span></code></pre></td></tr></table></div></figure>


<h2>Create tests for 1st resource</h2>

<p>I know I should probably create all the tests first, but I feel so lost without the stuff there first, ya know.</p>

<p>Create the tests using generate, then completely replace what is in the files.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ rails g mini_test:feature DoctorShowIndex
</span><span class='line'>
</span><span class='line'>  $ rails g mini_test:feature DoctorShow
</span><span class='line'>
</span><span class='line'>  $ rails g mini_test:feature DoctorCreate
</span><span class='line'>
</span><span class='line'>  $ rails g mini_test:feature DoctorUpdate
</span><span class='line'>
</span><span class='line'>  $ rails g mini_test:feature DoctorDelete</span></code></pre></td></tr></table></div></figure>


<p>Add /test/ folder.  Add /test/doctors/ folder.  Move doctor tests. Then
add fixture support to /test/test_helper.rb</p>

<h2>Modify views for 1st resource</h2>

<p>Add Doctor name to display on /doctors/new page</p>

<p>Edit all the 5 /views/doctors/*.html.erb to display the fields from the
models.</p>

<h2>Run the tests for 1st resource</h2>

<p>Make sure all Doctor stuff works.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ rake</span></code></pre></td></tr></table></div></figure>


<h2>Create 2nd resource scaffold</h2>

<p>Time to implement Patients:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ rails g scaffold Patient name:string --no-test-framework --no-assets --no-stylesheets --no-scss</span></code></pre></td></tr></table></div></figure>


<h2>Create tests for 2nd resource</h2>

<p>Then create the Patient tests:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ rails g mini_test:feature PatientShowIndex
</span><span class='line'>
</span><span class='line'>  $ rails g mini_test:feature PatientShow
</span><span class='line'>
</span><span class='line'>  $ rails g mini_test:feature PatientCreate
</span><span class='line'>
</span><span class='line'>  $ rails g mini_test:feature ItemUpdate
</span><span class='line'>
</span><span class='line'>  $ rails g mini_test:feature ItemDelete</span></code></pre></td></tr></table></div></figure>


<p>Add /test/patients/ folder.  Move patient tests.</p>

<h2>Migrate DB for 2nd resource</h2>

<p>Add Patients to the DB:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ rake db:migrate</span></code></pre></td></tr></table></div></figure>


<h2>Modify views for 2nd resource</h2>

<p>Add Patient name to display on /patients/new page</p>

<p>Edit all the 5 /views/patients/*.html.erb to display the fields from the
models.</p>

<h2>Run the tests for 2nd resource</h2>

<p>Make sure all Patient stuff works.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ rake</span></code></pre></td></tr></table></div></figure>


<h1>Final notes</h1>

<p>You now have a working rails application with two resources, some minitests, a bit of security lockdown, and some useful views for the app.</p>

<p>Thank you for reading.  I hope you found this useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Like VI]]></title>
    <link href="http://techblog.susanprestage.com//blog/2013/12/06/why-i-like-vi/"/>
    <updated>2013-12-06T13:08:54-08:00</updated>
    <id>http://techblog.susanprestage.com//blog/2013/12/06/why-i-like-vi</id>
    <content type="html"><![CDATA[<h2>What is VI</h2>

<p>VI is a powerful, but brutal, command line text editor available on all unix-based systems.</p>

<p>I discovered VI while at university studying for my computer engineering degree.  The joke at the time was that VI is &lsquo;user VIolent&rsquo;.  It is hard to deny this perspective, especially as I share it.  After my first couple of stumblings into inadvertent launchings of vi, my unix mentor sat down with me and first taught me how to get the heck out of there, and then taught me how to leverage it to my own benefit.</p>

<p>The biggest benefits to me are:</p>

<ol>
<li><p>The ease with which I can jump around my document by line/word/page.</p></li>
<li><p>The ability to copy/paste/delete my chosen number of words or lines.</p></li>
</ol>


<p>For any quick little documents I need to write, I am usually happiest in vi.</p>

<h2>Understanding Command mode vs Insert mode</h2>

<p>Vi has two modes of operation.  Command mode and Insert mode.  Command mode takes commands which cause action to be taken on the file you are working on.  Insert mode is where entered text is inserted into the file.</p>

<h4>Command mode</h4>

<ul>
<li>In the command mode, every character typed is a command that does something to the text file being edited; a character typed in the command mode may even cause the vi editor to enter the insert mode.</li>
</ul>


<h4>Insert mode</h4>

<ul>
<li>In the insert mode, every character typed is added to the text in the  file; pressing the \<Esc> (Escape) key turns off the Insert mode.</li>
</ul>


<h2>Using VI Commands</h2>

<h4>* Starting/exiting vi</h4>

<p>How to get into vi in the first place.  From your command line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vi your_filename</span></code></pre></td></tr></table></div></figure>


<p>To exit vi and save changes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:wq</span></code></pre></td></tr></table></div></figure>


<p>To exit vi without saving changes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:q!</span></code></pre></td></tr></table></div></figure>


<p>And most importantly, to enter vi command mode:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[esc]</span></code></pre></td></tr></table></div></figure>


<h4>* Cursor movement (to be written)</h4>

<h4>* Screen movement (to be written)</h4>

<h4>* Alter text (to be written)</h4>

<h6>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*   Insert or add text (to be written)</h6>

<h6>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*   Change text (to be written)</h6>

<h6>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*   Delete text (to be written)</h6>

<h4>* Search (to be written)</h4>

<hr />

<h3>NOTE</h3>

<p>Both UNIX and vi are case-sensitive. Be sure not to use a capital letter in place of a lowercase letter; the results will not be what you expect.</p>

<h2>Fini</h2>

<p>Thank you for reading.  I hope you found this useful.  I invite you to read my next post if you are interested in learning how to create a basic rails application with two resources, some minitests, a bit of security lockdown, and some useful views for the app.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How the Unix .alias File Can Make Your Command Line Life Better]]></title>
    <link href="http://techblog.susanprestage.com//blog/2013/12/04/unix-alias-file/"/>
    <updated>2013-12-04T12:50:52-08:00</updated>
    <id>http://techblog.susanprestage.com//blog/2013/12/04/unix-alias-file</id>
    <content type="html"><![CDATA[<h1>Incomplete!!!</h1>

<p>This post is only outlined and still needs to be written out.</p>

<h2>Intro to .alias</h2>

<p>Why use command aliases in unix.</p>

<h2>How to implement</h2>

<p>Command aliases in unix.</p>

<h4>location</h4>

<pre><code>- where to location of the alias file
- what is the alias file called
</code></pre>

<h4>sourcing</h4>

<pre><code>- how to source it manually and automatically
</code></pre>

<h2>Favorite shortcuts</h2>

<pre><code>- talk about my 10 favorite shortcuts
    va
    sc
    la
    l
    cf
    h
    ls
    a
    rm -i
</code></pre>

<h2>Remembering new commands</h2>

<pre><code>- also a good way of noting down commands you just learned and want to use much more, and want to get the syntax down before you forget
</code></pre>

<h2>Protect from unfortunate commands</h2>

<h2>Fini</h2>

<p>Thank you for reading.  I hope you found this useful.  I invite you to read my next post if you are interested in learning about vi and why I like it so much.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Favorite Unix Commands]]></title>
    <link href="http://techblog.susanprestage.com//blog/2013/12/03/my-favorite-unix-commands/"/>
    <updated>2013-12-03T16:03:22-08:00</updated>
    <id>http://techblog.susanprestage.com//blog/2013/12/03/my-favorite-unix-commands</id>
    <content type="html"><![CDATA[<p>Where is the command I&rsquo;m trying to use stored.  This is good for when you are not sure which version of something is being used.  Or which of two different installations of something is being used.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>type (for when where doesn't tell me what I want)</span></code></pre></td></tr></table></div></figure>


<p>This gives a nice recursive directory listing in a tree format.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tree</span></code></pre></td></tr></table></div></figure>


<p>Erase this whole line that I am at the end of.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ctrl] + u</span></code></pre></td></tr></table></div></figure>


<p>Stop this program I&rsquo;m in.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ctrl] + c</span></code></pre></td></tr></table></div></figure>


<p>No really, stop the danged program.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ctrl] + d</span></code></pre></td></tr></table></div></figure>


<p>Give me various different verbosity levels of a process listing.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ps
</span><span class='line'>ps -ef
</span><span class='line'>ps -x
</span><span class='line'>ps -a</span></code></pre></td></tr></table></div></figure>


<p>How to kill a process.  This command can be different for different unix systems.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kill &lt;process_id&gt;
</span><span class='line'>kill &lt;process_id&gt;</span></code></pre></td></tr></table></div></figure>


<p>Path shortcut representations.</p>

<p>For my own (current user) directory, usually something like /Users/susanprestage.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~</span></code></pre></td></tr></table></div></figure>


<p>Where <code>cd ~</code> will change in the the current user&rsquo;s root directory.</p>

<p>The current directory is represented by <code>.</code>.  For example, <code>./my_script</code> would run the copy of my_script that is stored in the current directory.</p>

<p>The parent directory to the current directory is represented by <code>..</code>.  For example, if I were currently in /Users/susanprestage/workspace but wanted to change into /Users/susanprestage/bin, I could use <code>cd ../bin</code> to get there.</p>

<p>Print the full path of the current aka working directory.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pwd</span></code></pre></td></tr></table></div></figure>


<h2>Fini</h2>

<p>Thank you for reading.  I hope you found this useful.  I invite you to read my next post if you are interested in learning how to use the unix .alias file to make your command line experience more pleasurable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Personal Git Command Reference]]></title>
    <link href="http://techblog.susanprestage.com//blog/2013/12/02/my-personal-git-command-reference/"/>
    <updated>2013-12-02T18:47:42-08:00</updated>
    <id>http://techblog.susanprestage.com//blog/2013/12/02/my-personal-git-command-reference</id>
    <content type="html"><![CDATA[<h1>Git Basics</h1>

<h2>Setting up a new project</h2>

<h3>Set up the local repository</h3>

<p>Brand new project.  Start in the project directory.  Then:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git init</span></code></pre></td></tr></table></div></figure>


<p>Ready to stage your commits?  Here is the long way:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git add .
</span><span class='line'>  $ git commit -m "Initial commit"</span></code></pre></td></tr></table></div></figure>


<p>Here is a useful short way to do both of the above commands at once:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git commit -am "Initial commit"</span></code></pre></td></tr></table></div></figure>


<h3>Set up remote repository</h3>

<p>Point to a new repo on github.  Note: must create this new repo on github first!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git remote add origin https://github.com/&ltusername&gt;/&ltyour_new_app_name&gt;.git</span></code></pre></td></tr></table></div></figure>


<p>Show the remote repositories that are being pointed to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git remote -v</span></code></pre></td></tr></table></div></figure>


<p>List remote and local branches:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git branch -a</span></code></pre></td></tr></table></div></figure>


<p>Push to github:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git push -u origin master</span></code></pre></td></tr></table></div></figure>


<h3>Set up Heroku</h3>

<p>First, go to Heroku and create a new repo.
Next, push to heroku:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ heroku create
</span><span class='line'>  $ git push heroku master
</span><span class='line'>  $ heroku run rake db:migrate</span></code></pre></td></tr></table></div></figure>


<p>Further pushes to heroku</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git push heroku master</span></code></pre></td></tr></table></div></figure>


<p>If you encounter problems, this will show you the logs on Heroku for diagnostics</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ heroku logs</span></code></pre></td></tr></table></div></figure>


<h2>Frequent staging, commiting, and pushing</h2>

<p>Even better is that if you are working offline, you can keep staging and committing.  Then push all to the remote repository at once when you have internet connectivity again.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git add .
</span><span class='line'>  $ git commit -m "brief explanation of changes here"
</span><span class='line'>  $ git push</span></code></pre></td></tr></table></div></figure>


<h3>What is the status of your files</h3>

<p>How is git looking (you will find some useful guidance printed out with this command too):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git status</span></code></pre></td></tr></table></div></figure>


<h1>Branching</h1>

<h3>New branch exists on remote</h3>

<h4>New branches on github</h4>

<p>So, your teammate has been working on a new branch they just created and then committed to github.  You now want to start working locally on that new branch.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git fetch origin bug-request-id
</span><span class='line'>  $ git checkout bug-request-id</span></code></pre></td></tr></table></div></figure>


<h4>Several new branches on github</h4>

<p>You&rsquo;ve been heads down on your work on a branch and your team has created several new branches remotely on github and now you need to start contributing to those branches.  To get look at what the remote branches are,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git fetch</span></code></pre></td></tr></table></div></figure>


<p>Now you will see everything on the remote when you want to list your local and remote branches with this command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git branch -a</span></code></pre></td></tr></table></div></figure>


<p>Finally, to bring the remote branch code down to your local, once you fetched:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git checkout bug-request-id</span></code></pre></td></tr></table></div></figure>


<h3>Create new branch locally</h3>

<h4>Starting the new branch locally</h4>

<p>First, create the branch locally.  This automatically changes you to this branch locally.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git checkout -b new_branch_name</span></code></pre></td></tr></table></div></figure>


<p>Note, you can do this even if you already have changes made.  They&rsquo;ll simply still be there, unstaged and uncommitted in the new branch.</p>

<h4>Pushing the new branch to github</h4>

<p>To check this into github, do this and the new branch will automatically get created on github,
then your code will get pushed into that branch.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git push origin new_branch_name</span></code></pre></td></tr></table></div></figure>


<h3>Good git references</h3>

<p>Also very useful are these links:
<a href="http://www.ndpsoftware.com/git-cheatsheet.html#loc=workspace;">http://www.ndpsoftware.com/git-cheatsheet.html#loc=workspace;</a>
<a href="http://git-scm.com/book">http://git-scm.com/book</a>
<a href="http://techblog.susanprestage.com/blog/2013/12/02/my-personal-git-command-reference/">http://techblog.susanprestage.com/blog/2013/12/02/my-personal-git-command-reference/</a></p>

<h3>Working with a branch</h3>

<p>Use this to confirm WHICH branch you are on.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git branch
</span><span class='line'>  $ git add .
</span><span class='line'>  $ git commit -m "a good commit message"
</span><span class='line'>  $ git push origin new_branch_name</span></code></pre></td></tr></table></div></figure>


<p>Very important tips for switching between branches.  ALWAYS commit your changes to your current branch before changing branches.  I assumed the files would stay in the old branch as I switched to the new branch, but NO.  The changes will follow you around like a lost puppy until you commit them.</p>

<h3>Merging your branch(es)</h3>

<p>Ok, I&rsquo;ve got this branch (or worse, several branches).  I&rsquo;m done working on them.  They are all checked in, as branches.  But now, I need to get the master branch back up to date.  How do I do this with FIVE branches.  Don&rsquo;t panic, we can do this thing.  First, make sure everything is up to date and checked in.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git status</span></code></pre></td></tr></table></div></figure>


<p>Then, get onto the master branch.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git checkout master</span></code></pre></td></tr></table></div></figure>


<p>Now we are going to merge each branch in, push it to github, and then delete the branch since we are done with them.  Skip the last step if you aren&rsquo;t quite done with the branch.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git merge chapter_2
</span><span class='line'>  $ git push origin master    (also can just usually say 'git push' here)
</span><span class='line'>  $ git branch -d chapter_2
</span><span class='line'>
</span><span class='line'>  $ git merge chapter_3
</span><span class='line'>  $ git push
</span><span class='line'>  $ git branch -d chapter_3</span></code></pre></td></tr></table></div></figure>


<p>Repeat until you&rsquo;ve merged in each branch.  Yeay!  This worked for me and I saw what I wanted on github.  I have both the branches I expect as well as each branch merge present as a commit on the master.  Excellent!  Git is starting to be a Very useful tool instead of an occasional impediment.  :)</p>

<h1>Stashing</h1>

<p>In the middle of some work on another branch and have to interrupt and get back to the master for some reason?  Do this.  First see what you are working on</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git diff</span></code></pre></td></tr></table></div></figure>


<p>Save working directory and index state WIP on my_branch and restores last commit.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git stash save</span></code></pre></td></tr></table></div></figure>


<p>Now these return nothing</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git diff
</span><span class='line'>  $ git status</span></code></pre></td></tr></table></div></figure>


<p>Now get back to master and update:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git checkout master
</span><span class='line'>  $ git pull</span></code></pre></td></tr></table></div></figure>


<p>When done, get back to our stashed work:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git checkout my_branch
</span><span class='line'>  $ git stash apply</span></code></pre></td></tr></table></div></figure>


<p>Verify we are in the same place:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git diff
</span><span class='line'>
</span><span class='line'>  $ git stash list
</span><span class='line'>  $ git stash apply stash@{1}
</span><span class='line'>  $ git stash drop</span></code></pre></td></tr></table></div></figure>


<h2>Whoops!  Now what do I do?  Gentle commands</h2>

<h3>How to undo my last commit, not yet pushed</h3>

<p>I staged my files <code>git add .</code> and then committed them <code>git commit -m "changes I don't want to make yet"</code>, but the I realize that I want to undo all that for some reason, like I&rsquo;m on the wrong branch.</p>

<p>Simple.  Two steps.  First, undo the commit.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset --soft HEAD~</span></code></pre></td></tr></table></div></figure>


<p>Next, unstage the files.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset HEAD app/helpers/timezone_helper.rb</span></code></pre></td></tr></table></div></figure>


<p>Do a <code>git status</code> before and after each command to better see what is happening.</p>

<h3>Check out a particular commit by SHA</h3>

<p>To check out a particular commit, use</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git checkout &ltsha1&gt;</span></code></pre></td></tr></table></div></figure>


<h3>Revert changes to local working copy</h3>

<p>To revert changes made to your working copy, restoring your local copy to the most recently checked in remote copy, do this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git checkout .</span></code></pre></td></tr></table></div></figure>


<h2>Powerful commands, use with caution</h2>

<h3>Unstage</h3>

<p>Reset the staging area to match the most recent commit, but leave the working directory unchanged. This unstages all files without overwriting any changes, giving you the opportunity to re-build the staged snapshot from scratch.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git reset</span></code></pre></td></tr></table></div></figure>


<p>Reset the staging area and the working directory to match the most recent commit. In addition to unstaging changes, the &ndash;hard flag tells Git to overwrite all changes in the working directory, too. Put another way: this obliterates all uncommitted changes, so make sure you really want to throw away your local developments before using it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git reset --hard</span></code></pre></td></tr></table></div></figure>


<p>Careful: <code>git reset &ndash;hard</code> WILL DELETE YOUR WORKING DIRECTORY CHANGES. Be sure to stash any local changes you want to keep before running this command.</p>

<p>Assuming you are sitting on that commit, then this command will wack it&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git reset --hard HEAD~1</span></code></pre></td></tr></table></div></figure>


<p>The HEAD~1 means the commit before head.</p>

<p>Or, you could look at the output of git log, find the commit id of the commit you want to back up to, and then do this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git reset --hard &lt;sha1-commit-id&gt;</span></code></pre></td></tr></table></div></figure>


<p>If you REALLY want to rewrite history.  Think very, very carefully about this BEFORE doing it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git reset --hard &lt;old-commit-id&gt;
</span><span class='line'>  $ git push -f</span></code></pre></td></tr></table></div></figure>


<h3>Switch to specific commit</h3>

<p>Temporarily switch to a different commit</p>

<p>If you want to temporarily go back to it, fool around, then come back to where you are, all you have to do is check out the desired commit:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  # This will detach your HEAD, that is, leave you with no branch checked out:
</span><span class='line'>
</span><span class='line'>  $ git checkout 0d1d7fc32</span></code></pre></td></tr></table></div></figure>


<p>Or if you want to make commits while you&rsquo;re there, go ahead and make a new branch while you&rsquo;re at it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  git checkout -b old-state 0d1d7fc32</span></code></pre></td></tr></table></div></figure>


<h3>Merge</h3>

<p>How to merge the master branch into the feature branch? Easy:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git checkout feature1
</span><span class='line'>  $ git merge master</span></code></pre></td></tr></table></div></figure>


<p>Merge branch back into master</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git checkout master
</span><span class='line'>  $ git merge my_branch</span></code></pre></td></tr></table></div></figure>


<h3>Merge conflict</h3>

<p>When there is a conflict during a merge, you have to finish the merge commit manually. It sounds like you&rsquo;ve done the first two steps, to edit the files that conflicted and then run</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git add</span></code></pre></td></tr></table></div></figure>


<p>on them to mark them as resolved.</p>

<p>Finally, you need to actually commit the merge with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git commit</span></code></pre></td></tr></table></div></figure>


<p>after which you will be able to switch branches again.</p>

<h3>Have I forgotten to push?</h3>

<p>How do I tell if my committed changes have been pushed to github?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git log origin/master..HEAD</span></code></pre></td></tr></table></div></figure>


<p>You can also view the diff using the same syntax</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git diff origin/master..HEAD</span></code></pre></td></tr></table></div></figure>


<h3>Duplicate a branch</h3>

<p>Copy old_branch into a new_branch.  (Useful for trying out a merge you are worried about.)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git checkout old_branch
</span><span class='line'>  $ git branch new_branch
</span><span class='line'>  $ git checkout new_branch</span></code></pre></td></tr></table></div></figure>


<h3>Destroy local branch</h3>

<p>Get rid of a branch and everything in it changed or not.  (Useful after you&rsquo;ve tried out a merge on a temporary branch.)</p>

<p>First, you have to get rid of the changes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git reset --hard HEAD</span></code></pre></td></tr></table></div></figure>


<p>Next, change to a different, good branch</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git checkout master</span></code></pre></td></tr></table></div></figure>


<p>Lastly, delete the branch</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git branch -d temporary_branch</span></code></pre></td></tr></table></div></figure>


<p>you may need to use a -D option to force this.  BE CAREFUL not to delete something you care about.  Really!</p>

<h3>Tidy up leftovers</h3>

<p>Once you delete the branch from the remote, you can prune to get rid of remote tracking branches with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git branch -r -d origin/newfeaturebranch</span></code></pre></td></tr></table></div></figure>


<p>This will prune All of your old references to already-deleted-on-github branches.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git remote prune origin</span></code></pre></td></tr></table></div></figure>


<h3>Restore local master</h3>

<p>You&rsquo;ve messed things up on your local master and need to get back.</p>

<p>Setting your branch to exactly match the remote branch can be done in two steps:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ git fetch origin
</span><span class='line'>  $ git reset --hard origin/master</span></code></pre></td></tr></table></div></figure>


<h2>Fini</h2>

<p>Thank you for reading.  I hope you found this useful.  I invite you to read my next post if you are interested in the unix commands that I find most useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Overcoming My Fear of Git Through Knowledge]]></title>
    <link href="http://techblog.susanprestage.com//blog/2013/12/01/overcoming-my-fear-of-git-through-knowledge/"/>
    <updated>2013-12-01T18:59:42-08:00</updated>
    <id>http://techblog.susanprestage.com//blog/2013/12/01/overcoming-my-fear-of-git-through-knowledge</id>
    <content type="html"><![CDATA[<h2>Getting past my fear of Git</h2>

<p>Git kept scaring me.  Mostly, this fear is based on how wonderfully powerful a tool that Git (and github) can be and my lack of easy comfort with the commands.  So, I&rsquo;ve made a list of my most used commands and any notes I need for use.  This goes a bit long, since as I learned more and more commands, I added more that I was starting to use.  Good luck!</p>

<h2>What is Git</h2>

<h4>Basics</h4>

<p>Git is a version control system, VCS.  Don&rsquo;t think too carefully about the other VCSs you know, like Perforce or Subversion.  Git is much different and trying to compare will likely cause confusion.</p>

<h4>Snapshots, instead of differences</h4>

<p>Most other systems tend to store data as changes to a base version of each file.  Git doesn&rsquo;t think of it&rsquo;s data that way.  Instead, Git thinks of its data more like a set of snapshots of a mini-filesystem.  And, to be efficient, Git only takes a snapshot of the files that have changed, simply linking to all the other files that have not changed.</p>

<h4>Local</h4>

<p>Most operations you perform with Git will be local. The entire history of your repository will be right there on your machine, which means that diffs and browsing the history of your project is very quick.  This also means that working offline is not a problem.  You simply commit all you like while offline, then push your work up to the remote repository server when you get back to a network connection.</p>

<h4>The Three States of Git</h4>

<h6>1. The Working Directory</h6>

<h6>2. The Staging Area</h6>

<h6>3. The Git Repository</h6>

<p><a target="_blank" href="#blog"><img class="img-portfolio img-responsive" src="https://s3-us-west-2.amazonaws.com/technicalblog/three_states_of_git.png" width="340" height="284"></a></p>

<p>Git has three main states that your files can reside in: commited, modified, and staged.  Commited means that the data is safely stored in your local repository.  Modified means that you have changed the file, but not yet commited it to your local repository.  Staged means that you have marked a modified file to go into your next commit snapshot.</p>

<ul>
<li><p>Check out the project to bring the files from the git repository into your working directory.</p></li>
<li><p>Stage your files to bring those changes from your working directory to the staging area.</p></li>
<li><p>Commit your files to bring the changes from the staging area to the git repository.</p></li>
</ul>


<p>Your workflow will be something like this:</p>

<ol>
<li>Modify files in your working directory.</li>
<li>Stage the files.  This adds snapshots of them to the staging area.</li>
<li>Commit your changes.  This takes the files as they are in the staging area and stores that snapshot in your git repository.</li>
</ol>


<h2>Getting started with Git</h2>

<p>To install and setup Git, go here and follow the very good instructions.</p>

<ul>
<li><a href="http://git-scm.com/book/en/Getting-Started-Installing-Git">http://git-scm.com/book/en/Getting-Started-Installing-Git</a></li>
<li><a href="http://git-scm.com/book/en/Getting-Started-First-Time-Git-Setup">http://git-scm.com/book/en/Getting-Started-First-Time-Git-Setup</a></li>
</ul>


<p>I highly recommend the entire <a href="http://git-scm.com/documentation">http://git-scm.com/documentation</a> site.  For a more thorough explanation of Git, what it is and how it works, I particularly recommend this chapter <a href="http://git-scm.com/book/en/Getting-Started-Git-Basics.">http://git-scm.com/book/en/Getting-Started-Git-Basics.</a></p>

<h2>Final notes on Git</h2>

<p>I have found that it is important to stage and commit your files often and in small increments.  Any time you have a change that makes sense as its own commit, do so.  If what you are working on is so big that you think you ought to wait to commit, then I strongly recommend branching and then again you should be able to break down your commits within that branch.  You really want to be able to track what you did later, both for yourself and for others trying to maintain your code.</p>

<h2>Fini</h2>

<p>Thank you for reading.  I hope you found this useful.  I invite you to read my next post if you are interested in the Git commands that I find most useful.</p>
]]></content>
  </entry>
  
</feed>
